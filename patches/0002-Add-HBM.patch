From a0bce0e587e3d2f4672de5af66a6a641eb554050 Mon Sep 17 00:00:00 2001
From: twodoorcoupe <giorgio.fontanive@outlook.com>
Date: Fri, 9 May 2025 10:33:32 +0200
Subject: [PATCH] Add HBM

---
 src/qdma_subsystem/qdma_hbm_bd.tcl            | 426 ++++++++++++++++++
 src/qdma_subsystem/qdma_subsystem.sv          | 230 +++++++++-
 .../qdma_subsystem_qdma_wrapper.v             | 138 ++++++
 .../vivado_ip/qdma_no_sriov_au55c.tcl         |  72 ++-
 4 files changed, 823 insertions(+), 43 deletions(-)
 create mode 100644 src/qdma_subsystem/qdma_hbm_bd.tcl

diff --git a/src/qdma_subsystem/qdma_hbm_bd.tcl b/src/qdma_subsystem/qdma_hbm_bd.tcl
new file mode 100644
index 0000000..7145a59
--- /dev/null
+++ b/src/qdma_subsystem/qdma_hbm_bd.tcl
@@ -0,0 +1,426 @@
+
+################################################################
+# This is a generated script based on design: qdma_hbm_bd
+#
+# Though there are limitations about the generated script,
+# the main purpose of this utility is to make learning
+# IP Integrator Tcl commands easier.
+################################################################
+
+namespace eval _tcl {
+proc get_script_folder {} {
+   set script_path [file normalize [info script]]
+   set script_folder [file dirname $script_path]
+   return $script_folder
+}
+}
+variable script_folder
+set script_folder [_tcl::get_script_folder]
+
+################################################################
+# Check if script is running in correct Vivado version.
+################################################################
+set scripts_vivado_version 2024.2
+set current_vivado_version [version -short]
+
+if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
+   puts ""
+   if { [string compare $scripts_vivado_version $current_vivado_version] > 0 } {
+      catch {common::send_gid_msg -ssname BD::TCL -id 2042 -severity "ERROR" " This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Sourcing the script failed since it was created with a future version of Vivado."}
+
+   } else {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2041 -severity "ERROR" "This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."}
+
+   }
+
+   return 1
+}
+
+################################################################
+# START
+################################################################
+
+# To test this script, run the following commands from Vivado Tcl console:
+# source qdma_hbm_bd_script.tcl
+
+# If there is no project opened, this script will create a
+# project, but make sure you do not have an existing project
+# <./myproj/project_1.xpr> in the current working folder.
+
+set list_projs [get_projects -quiet]
+if { $list_projs eq "" } {
+   create_project project_1 myproj -part xcu55c-fsvh2892-2L-e
+   set_property BOARD_PART xilinx.com:au55c:part0:1.0 [current_project]
+}
+
+
+# CHANGE DESIGN NAME HERE
+variable design_name
+set design_name qdma_hbm_bd
+
+# If you do not already have an existing IP Integrator design open,
+# you can create a design using the following command:
+#    create_bd_design $design_name
+
+# Creating design if needed
+set errMsg ""
+set nRet 0
+
+set cur_design [current_bd_design -quiet]
+set list_cells [get_bd_cells -quiet]
+
+if { ${design_name} eq "" } {
+   # USE CASES:
+   #    1) Design_name not set
+
+   set errMsg "Please set the variable <design_name> to a non-empty value."
+   set nRet 1
+
+} elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
+   # USE CASES:
+   #    2): Current design opened AND is empty AND names same.
+   #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
+   #    4): Current design opened AND is empty AND names diff; design_name exists in project.
+
+   if { $cur_design ne $design_name } {
+      common::send_gid_msg -ssname BD::TCL -id 2001 -severity "INFO" "Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
+      set design_name [get_property NAME $cur_design]
+   }
+   common::send_gid_msg -ssname BD::TCL -id 2002 -severity "INFO" "Constructing design in IPI design <$cur_design>..."
+
+} elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
+   # USE CASES:
+   #    5) Current design opened AND has components AND same names.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 1
+} elseif { [get_files -quiet ${design_name}.bd] ne "" } {
+   # USE CASES: 
+   #    6) Current opened design, has components, but diff names, design_name exists in project.
+   #    7) No opened design, design_name exists in project.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 2
+
+} else {
+   # USE CASES:
+   #    8) No opened design, design_name not in project.
+   #    9) Current opened design, has components, but diff names, design_name not in project.
+
+   common::send_gid_msg -ssname BD::TCL -id 2003 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."
+
+   create_bd_design $design_name
+
+   common::send_gid_msg -ssname BD::TCL -id 2004 -severity "INFO" "Making design <$design_name> as current_bd_design."
+   current_bd_design $design_name
+
+}
+
+common::send_gid_msg -ssname BD::TCL -id 2005 -severity "INFO" "Currently the variable <design_name> is equal to \"$design_name\"."
+
+if { $nRet != 0 } {
+   catch {common::send_gid_msg -ssname BD::TCL -id 2006 -severity "ERROR" $errMsg}
+   return $nRet
+}
+
+set bCheckIPsPassed 1
+##################################################################
+# CHECK IPs
+##################################################################
+set bCheckIPs 1
+if { $bCheckIPs == 1 } {
+   set list_check_ips "\ 
+xilinx.com:ip:hbm:1.0\
+xilinx.com:ip:clk_wiz:6.0\
+xilinx.com:ip:proc_sys_reset:5.0\
+xilinx.com:ip:smartconnect:1.0\
+"
+
+   set list_ips_missing ""
+   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."
+
+   foreach ip_vlnv $list_check_ips {
+      set ip_obj [get_ipdefs -all $ip_vlnv]
+      if { $ip_obj eq "" } {
+         lappend list_ips_missing $ip_vlnv
+      }
+   }
+
+   if { $list_ips_missing ne "" } {
+      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
+      set bCheckIPsPassed 0
+   }
+
+}
+
+if { $bCheckIPsPassed != 1 } {
+  common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
+  return 3
+}
+
+##################################################################
+# DESIGN PROCs
+##################################################################
+
+
+
+# Procedure to create entire design; Provide argument to make
+# procedure reusable. If parentCell is "", will use root.
+proc create_root_design { parentCell } {
+
+  variable script_folder
+  variable design_name
+
+  if { $parentCell eq "" } {
+     set parentCell [get_bd_cells /]
+  }
+
+  # Get object for parentCell
+  set parentObj [get_bd_cells $parentCell]
+  if { $parentObj == "" } {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
+     return
+  }
+
+  # Make sure parentObj is hier blk
+  set parentType [get_property TYPE $parentObj]
+  if { $parentType ne "hier" } {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
+     return
+  }
+
+  # Save current instance; Restore later
+  set oldCurInst [current_bd_instance .]
+
+  # Set parent object as current
+  current_bd_instance $parentObj
+
+
+  # Create interface ports
+  set S00_AXI_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S00_AXI_0 ]
+  set_property -dict [ list \
+   CONFIG.ADDR_WIDTH {64} \
+   CONFIG.ARUSER_WIDTH {32} \
+   CONFIG.AWUSER_WIDTH {32} \
+   CONFIG.BUSER_WIDTH {0} \
+   CONFIG.DATA_WIDTH {512} \
+   CONFIG.FREQ_HZ {250000000} \
+   CONFIG.HAS_BRESP {1} \
+   CONFIG.HAS_BURST {0} \
+   CONFIG.HAS_CACHE {1} \
+   CONFIG.HAS_LOCK {1} \
+   CONFIG.HAS_PROT {1} \
+   CONFIG.HAS_QOS {0} \
+   CONFIG.HAS_REGION {0} \
+   CONFIG.HAS_RRESP {1} \
+   CONFIG.HAS_WSTRB {1} \
+   CONFIG.ID_WIDTH {4} \
+   CONFIG.MAX_BURST_LENGTH {256} \
+   CONFIG.NUM_READ_OUTSTANDING {32} \
+   CONFIG.NUM_READ_THREADS {1} \
+   CONFIG.NUM_WRITE_OUTSTANDING {32} \
+   CONFIG.NUM_WRITE_THREADS {1} \
+   CONFIG.PROTOCOL {AXI4} \
+   CONFIG.READ_WRITE_MODE {READ_WRITE} \
+   CONFIG.RUSER_BITS_PER_BYTE {0} \
+   CONFIG.RUSER_WIDTH {0} \
+   CONFIG.SUPPORTS_NARROW_BURST {0} \
+   CONFIG.WUSER_BITS_PER_BYTE {0} \
+   CONFIG.WUSER_WIDTH {64} \
+   ] $S00_AXI_0
+
+
+  # Create ports
+  set aresetn [ create_bd_port -dir I -type rst aresetn ]
+  set axi_resetn [ create_bd_port -dir I axi_resetn ]
+  set hbm_ref_clk [ create_bd_port -dir I -type clk -freq_hz 100000000 hbm_ref_clk ]
+  set axi_clk [ create_bd_port -dir I -type clk -freq_hz 250000000 axi_clk ]
+  set_property -dict [ list \
+   CONFIG.CLK_DOMAIN {qdma_hbm_bd_qdma_0_0_axi_aclk} \
+ ] $axi_clk
+
+  # Create instance: hbm_0, and set properties
+  set hbm_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:hbm:1.0 hbm_0 ]
+  set_property -dict [list \
+    CONFIG.USER_APB_EN {false} \
+    CONFIG.USER_AXI_INPUT_CLK1_FREQ {250} \
+    CONFIG.USER_AXI_INPUT_CLK_FREQ {250} \
+    CONFIG.USER_HBM_DENSITY {16GB} \
+    CONFIG.USER_MC0_USER_PARITY_EN {false} \
+    CONFIG.USER_SAXI_00 {false} \
+    CONFIG.USER_SAXI_01 {false} \
+    CONFIG.USER_SAXI_02 {false} \
+    CONFIG.USER_SAXI_03 {false} \
+    CONFIG.USER_SAXI_04 {false} \
+    CONFIG.USER_SAXI_05 {false} \
+    CONFIG.USER_SAXI_06 {false} \
+    CONFIG.USER_SAXI_07 {false} \
+    CONFIG.USER_SAXI_08 {false} \
+    CONFIG.USER_SAXI_09 {false} \
+    CONFIG.USER_SAXI_10 {false} \
+    CONFIG.USER_SAXI_11 {false} \
+    CONFIG.USER_SAXI_12 {false} \
+    CONFIG.USER_SAXI_13 {false} \
+    CONFIG.USER_SAXI_14 {false} \
+    CONFIG.USER_SAXI_17 {false} \
+    CONFIG.USER_SAXI_18 {false} \
+    CONFIG.USER_SAXI_19 {false} \
+    CONFIG.USER_SAXI_20 {false} \
+    CONFIG.USER_SAXI_21 {false} \
+    CONFIG.USER_SAXI_22 {false} \
+    CONFIG.USER_SAXI_23 {false} \
+    CONFIG.USER_SAXI_24 {false} \
+    CONFIG.USER_SAXI_25 {false} \
+    CONFIG.USER_SAXI_26 {false} \
+    CONFIG.USER_SAXI_27 {false} \
+    CONFIG.USER_SAXI_28 {false} \
+    CONFIG.USER_SAXI_29 {false} \
+    CONFIG.USER_SAXI_30 {false} \
+    CONFIG.USER_SAXI_31 {false} \
+  ] $hbm_0
+
+
+  # Create instance: clk_wiz_0, and set properties
+  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
+  set_property -dict [list \
+    CONFIG.CLKIN1_JITTER_PS {100.0} \
+    CONFIG.CLKOUT1_JITTER {115.831} \
+    CONFIG.CLKOUT1_PHASE_ERROR {87.180} \
+    CONFIG.CLK_IN1_BOARD_INTERFACE {Custom} \
+    CONFIG.MMCM_CLKFBOUT_MULT_F {12.000} \
+    CONFIG.MMCM_CLKIN1_PERIOD {10.000} \
+    CONFIG.MMCM_CLKIN2_PERIOD {10.000} \
+    CONFIG.MMCM_DIVCLK_DIVIDE {1} \
+    CONFIG.PRIM_SOURCE {Single_ended_clock_capable_pin} \
+    CONFIG.RESET_PORT {resetn} \
+    CONFIG.RESET_TYPE {ACTIVE_LOW} \
+  ] $clk_wiz_0
+
+
+  # Create instance: proc_sys_reset_0, and set properties
+  set proc_sys_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0 ]
+
+  # Create instance: smartconnect_0, and set properties
+  set smartconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 smartconnect_0 ]
+  set_property -dict [list \
+    CONFIG.NUM_MI {2} \
+    CONFIG.NUM_SI {1} \
+  ] $smartconnect_0
+
+
+  # Create interface connections
+  connect_bd_intf_net -intf_net S00_AXI_0_1 [get_bd_intf_ports S00_AXI_0] [get_bd_intf_pins smartconnect_0/S00_AXI]
+  connect_bd_intf_net -intf_net smartconnect_0_M00_AXI [get_bd_intf_pins smartconnect_0/M00_AXI] [get_bd_intf_pins hbm_0/SAXI_15_8HI]
+  connect_bd_intf_net -intf_net smartconnect_0_M01_AXI [get_bd_intf_pins smartconnect_0/M01_AXI] [get_bd_intf_pins hbm_0/SAXI_16_8HI]
+
+  # Create port connections
+  connect_bd_net -net aclk_0_1  [get_bd_ports axi_clk] \
+  [get_bd_pins smartconnect_0/aclk] \
+  [get_bd_pins hbm_0/AXI_15_ACLK] \
+  [get_bd_pins hbm_0/AXI_16_ACLK]
+  connect_bd_net -net clk_in1_0_1  [get_bd_ports hbm_ref_clk] \
+  [get_bd_pins clk_wiz_0/clk_in1]
+  connect_bd_net -net clk_wiz_0_clk_out1  [get_bd_pins clk_wiz_0/clk_out1] \
+  [get_bd_pins hbm_0/HBM_REF_CLK_0] \
+  [get_bd_pins hbm_0/HBM_REF_CLK_1] \
+  [get_bd_pins hbm_0/APB_0_PCLK] \
+  [get_bd_pins hbm_0/APB_1_PCLK] \
+  [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
+  connect_bd_net -net clk_wiz_0_locked  [get_bd_pins clk_wiz_0/locked] \
+  [get_bd_pins proc_sys_reset_0/dcm_locked]
+  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn  [get_bd_pins proc_sys_reset_0/peripheral_aresetn] \
+  [get_bd_pins hbm_0/APB_0_PRESET_N] \
+  [get_bd_pins hbm_0/APB_1_PRESET_N]
+  connect_bd_net -net qdma_0_axi_aresetn  [get_bd_ports axi_resetn] \
+  [get_bd_pins hbm_0/AXI_15_ARESET_N] \
+  [get_bd_pins hbm_0/AXI_16_ARESET_N] \
+  [get_bd_pins smartconnect_0/aresetn]
+  connect_bd_net -net resetn_0_1  [get_bd_ports aresetn] \
+  [get_bd_pins proc_sys_reset_0/ext_reset_in] \
+  [get_bd_pins clk_wiz_0/resetn]
+
+  # Create address segments
+  assign_bd_address -offset 0x00000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM00] -force
+  assign_bd_address -offset 0x10000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM00_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM00] -force
+  assign_bd_address -offset 0x20000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM01] -force
+  assign_bd_address -offset 0x40000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM02] -force
+  assign_bd_address -offset 0x50000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM02_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM02] -force
+  assign_bd_address -offset 0x60000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM03] -force
+  assign_bd_address -offset 0x70000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM03_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM03] -force
+  assign_bd_address -offset 0x80000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM04] -force
+  assign_bd_address -offset 0x90000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM04_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM04] -force
+  assign_bd_address -offset 0xA0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM05] -force
+  assign_bd_address -offset 0xB0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM05_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM05] -force
+  assign_bd_address -offset 0xC0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM06] -force
+  assign_bd_address -offset 0xD0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM06_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM06] -force
+  assign_bd_address -offset 0xE0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM07] -force
+  assign_bd_address -offset 0xF0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM07_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM07] -force
+  assign_bd_address -offset 0x000100000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM08] -force
+  assign_bd_address -offset 0x000110000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM08_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM08] -force
+  assign_bd_address -offset 0x000120000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM09] -force
+  assign_bd_address -offset 0x000130000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM09_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM09] -force
+  assign_bd_address -offset 0x000140000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM10] -force
+  assign_bd_address -offset 0x000150000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM10_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM10] -force
+  assign_bd_address -offset 0x000160000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM11] -force
+  assign_bd_address -offset 0x000170000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM11_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM11] -force
+  assign_bd_address -offset 0x000180000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM12] -force
+  assign_bd_address -offset 0x000190000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM12_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM12] -force
+  assign_bd_address -offset 0x0001A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM13] -force
+  assign_bd_address -offset 0x0001B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM13_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM13] -force
+  assign_bd_address -offset 0x0001C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM14] -force
+  assign_bd_address -offset 0x0001D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM14_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM14] -force
+  assign_bd_address -offset 0x0001E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM15] -force
+  assign_bd_address -offset 0x0001F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM15_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM15] -force
+  assign_bd_address -offset 0x000200000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM16] -force
+  assign_bd_address -offset 0x000210000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM16_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM16] -force
+  assign_bd_address -offset 0x000220000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM17] -force
+  assign_bd_address -offset 0x000230000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM17_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM17] -force
+  assign_bd_address -offset 0x000240000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM18] -force
+  assign_bd_address -offset 0x000250000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM18_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM18] -force
+  assign_bd_address -offset 0x000260000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM19] -force
+  assign_bd_address -offset 0x000270000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM19_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM19] -force
+  assign_bd_address -offset 0x000280000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM20] -force
+  assign_bd_address -offset 0x000290000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM20_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM20] -force
+  assign_bd_address -offset 0x0002A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM21] -force
+  assign_bd_address -offset 0x0002B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM21_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM21] -force
+  assign_bd_address -offset 0x0002C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM22] -force
+  assign_bd_address -offset 0x0002D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM22_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM22] -force
+  assign_bd_address -offset 0x0002E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM23] -force
+  assign_bd_address -offset 0x0002F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM23_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM23] -force
+  assign_bd_address -offset 0x000300000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM24] -force
+  assign_bd_address -offset 0x000310000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM24_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM24] -force
+  assign_bd_address -offset 0x000320000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM25] -force
+  assign_bd_address -offset 0x000330000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM25_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM25] -force
+  assign_bd_address -offset 0x000340000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM26] -force
+  assign_bd_address -offset 0x000350000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM26_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM26] -force
+  assign_bd_address -offset 0x000360000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM27] -force
+  assign_bd_address -offset 0x000370000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM27_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM27] -force
+  assign_bd_address -offset 0x000380000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM28] -force
+  assign_bd_address -offset 0x000390000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM28_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM28] -force
+  assign_bd_address -offset 0x0003A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM29] -force
+  assign_bd_address -offset 0x0003B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM29_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM29] -force
+  assign_bd_address -offset 0x0003C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM30] -force
+  assign_bd_address -offset 0x0003D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM30_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM30] -force
+  assign_bd_address -offset 0x0003E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM31] -force
+  assign_bd_address -offset 0x0003F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM31_1 -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM31] -force
+
+  # Exclude Address Segments
+  exclude_bd_addr_seg -target_address_space [get_bd_addr_spaces S00_AXI_0] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM01]
+
+
+  # Restore current instance
+  current_bd_instance $oldCurInst
+
+  validate_bd_design
+  save_bd_design
+}
+# End of create_root_design()
+
+
+##################################################################
+# MAIN FLOW
+##################################################################
+
+create_root_design ""
+
+
diff --git a/src/qdma_subsystem/qdma_subsystem.sv b/src/qdma_subsystem/qdma_subsystem.sv
index 8e2a4a0..e863e71 100644
--- a/src/qdma_subsystem/qdma_subsystem.sv
+++ b/src/qdma_subsystem/qdma_subsystem.sv
@@ -181,6 +181,20 @@ module qdma_subsystem #(
   wire         h2c_byp_in_st_no_dma;
   wire         h2c_byp_in_st_rdy;
 
+  wire         h2c_byp_in_mm_vld;
+  wire  [63:0] h2c_byp_in_mm_radr;
+  wire  [63:0] h2c_byp_in_mm_wadr;
+  wire  [15:0] h2c_byp_in_mm_len;
+  wire         h2c_byp_in_mm_mrkr_req;
+  wire   [2:0] h2c_byp_in_mm_port_id;
+  wire         h2c_byp_in_mm_sdi;
+  wire  [10:0] h2c_byp_in_mm_qid;
+  wire         h2c_byp_in_mm_error;
+  wire   [7:0] h2c_byp_in_mm_func;
+  wire  [15:0] h2c_byp_in_mm_cidx;
+  wire         h2c_byp_in_mm_no_dma;
+  wire         h2c_byp_in_mm_rdy;
+
   wire         c2h_byp_out_vld;
   wire [255:0] c2h_byp_out_dsc;
   wire         c2h_byp_out_st_mm;
@@ -203,6 +217,61 @@ module qdma_subsystem #(
   wire   [6:0] c2h_byp_in_st_csh_pfch_tag;
   wire         c2h_byp_in_st_csh_rdy;
 
+  wire         c2h_byp_in_mm_vld;
+  wire  [63:0] c2h_byp_in_mm_radr;
+  wire  [63:0] c2h_byp_in_mm_wadr;
+  wire  [15:0] c2h_byp_in_mm_len;
+  wire         c2h_byp_in_mm_mrkr_req;
+  wire   [2:0] c2h_byp_in_mm_port_id;
+  wire         c2h_byp_in_mm_sdi;
+  wire  [10:0] c2h_byp_in_mm_qid;
+  wire         c2h_byp_in_mm_error;
+  wire   [7:0] c2h_byp_in_mm_func;
+  wire  [15:0] c2h_byp_in_mm_cidx;
+  wire         c2h_byp_in_mm_no_dma;
+  wire         c2h_byp_in_mm_rdy;
+
+  wire  [63:0] m_axi_araddr;
+  wire   [1:0] m_axi_arburst;
+  wire   [3:0] m_axi_arcache;
+  wire   [3:0] m_axi_arid;
+  wire   [7:0] m_axi_arlen;
+  wire   [0:0] m_axi_arlock;
+  wire   [2:0] m_axi_arprot;
+  wire   [3:0] m_axi_arqos;
+  wire         m_axi_arready;
+  wire   [2:0] m_axi_arsize;
+  wire  [31:0] m_axi_aruser;
+  wire         m_axi_arvalid;
+  wire  [63:0] m_axi_awaddr;
+  wire   [1:0] m_axi_awburst;
+  wire   [3:0] m_axi_awcache;
+  wire   [3:0] m_axi_awid;
+  wire   [7:0] m_axi_awlen;
+  wire   [0:0] m_axi_awlock;
+  wire   [2:0] m_axi_awprot;
+  wire   [3:0] m_axi_awqos;
+  wire         m_axi_awready;
+  wire   [2:0] m_axi_awsize;
+  wire  [31:0] m_axi_awuser;
+  wire         m_axi_awvalid;
+  wire   [3:0] m_axi_bid;
+  wire         m_axi_bready;
+  wire   [1:0] m_axi_bresp;
+  wire         m_axi_bvalid;
+  wire [511:0] m_axi_rdata;
+  wire   [3:0] m_axi_rid;
+  wire         m_axi_rlast;
+  wire         m_axi_rready;
+  wire   [1:0] m_axi_rresp;
+  wire         m_axi_rvalid;
+  wire [511:0] m_axi_wdata;
+  wire         m_axi_wlast;
+  wire         m_axi_wready;
+  wire  [63:0] m_axi_wstrb;
+  wire  [63:0] m_axi_wuser;
+  wire         m_axi_wvalid;
+
   wire         axil_aresetn;
 
   // Reset is clocked by the 125MHz AXI-Lite clock
@@ -227,6 +296,18 @@ module qdma_subsystem #(
     .ODIV2 (pcie_refclk)
   );
 
+  wire hbm_ref_clk;
+
+`ifdef __au55n__
+  assign ref_clk_100mhz = hbm_ref_clk;
+`elsif __au55c__
+  assign ref_clk_100mhz = hbm_ref_clk;
+`elsif __au50__
+  assign ref_clk_100mhz = hbm_ref_clk;
+`elsif __au280__
+  assign ref_clk_100mhz = hbm_ref_clk;
+`endif
+
   assign h2c_byp_out_rdy            = 1'b1;
   assign h2c_byp_in_st_vld          = 1'b0;
   assign h2c_byp_in_st_addr         = 0;
@@ -242,6 +323,19 @@ module qdma_subsystem #(
   assign h2c_byp_in_st_cidx         = 0;
   assign h2c_byp_in_st_no_dma       = 1'b0;
 
+  assign h2c_byp_in_mm_vld          = 1'b0;
+  assign h2c_byp_in_mm_radr         = 0;
+  assign h2c_byp_in_mm_wadr         = 0;
+  assign h2c_byp_in_mm_len          = 0;
+  assign h2c_byp_in_mm_mrkr_req     = 1'b0;
+  assign h2c_byp_in_mm_port_id      = 0;
+  assign h2c_byp_in_mm_sdi          = 1'b0;
+  assign h2c_byp_in_mm_qid          = 0;
+  assign h2c_byp_in_mm_error        = 1'b0;
+  assign h2c_byp_in_mm_func         = 0;
+  assign h2c_byp_in_mm_cidx         = 0;
+  assign h2c_byp_in_mm_no_dma       = 1'b0;
+
   assign c2h_byp_out_rdy            = 1'b1;
   assign c2h_byp_in_st_csh_vld      = 1'b0;
   assign c2h_byp_in_st_csh_addr     = 0;
@@ -251,6 +345,67 @@ module qdma_subsystem #(
   assign c2h_byp_in_st_csh_func     = 0;
   assign c2h_byp_in_st_csh_pfch_tag = 0;
 
+  assign c2h_byp_in_mm_vld          = 1'b0;
+  assign c2h_byp_in_mm_radr         = 0;
+  assign c2h_byp_in_mm_wadr         = 0;
+  assign c2h_byp_in_mm_len          = 0;
+  assign c2h_byp_in_mm_mrkr_req     = 1'b0;
+  assign c2h_byp_in_mm_port_id      = 0;
+  assign c2h_byp_in_mm_sdi          = 1'b0;
+  assign c2h_byp_in_mm_qid          = 0;
+  assign c2h_byp_in_mm_error        = 1'b0;
+  assign c2h_byp_in_mm_func         = 0;
+  assign c2h_byp_in_mm_cidx         = 0;
+  assign c2h_byp_in_mm_no_dma       = 1'b0;
+
+  qdma_hbm_bd_wrapper hbm_inst (
+    .S00_AXI_0_araddr                    (m_axi_araddr),
+    .S00_AXI_0_arburst                   (m_axi_arburst),
+    .S00_AXI_0_arcache                   (m_axi_arcache),
+    .S00_AXI_0_arid                      (m_axi_arid),
+    .S00_AXI_0_arlen                     (m_axi_arlen),
+    .S00_AXI_0_arlock                    (m_axi_arlock),
+    .S00_AXI_0_arprot                    (m_axi_arprot),
+    .S00_AXI_0_arqos                     (m_axi_arqos),
+    .S00_AXI_0_arready                   (m_axi_arready),
+    .S00_AXI_0_arsize                    (m_axi_arsize),
+    .S00_AXI_0_aruser                    (m_axi_aruser),
+    .S00_AXI_0_arvalid                   (m_axi_arvalid),
+    .S00_AXI_0_awaddr                    (m_axi_awaddr),
+    .S00_AXI_0_awburst                   (m_axi_awburst),
+    .S00_AXI_0_awcache                   (m_axi_awcache),
+    .S00_AXI_0_awid                      (m_axi_awid),
+    .S00_AXI_0_awlen                     (m_axi_awlen),
+    .S00_AXI_0_awlock                    (m_axi_awlock),
+    .S00_AXI_0_awprot                    (m_axi_awprot),
+    .S00_AXI_0_awqos                     (m_axi_awqos),
+    .S00_AXI_0_awready                   (m_axi_awready),
+    .S00_AXI_0_awsize                    (m_axi_awsize),
+    .S00_AXI_0_awuser                    (m_axi_awuser),
+    .S00_AXI_0_awvalid                   (m_axi_awvalid),
+    .S00_AXI_0_bid                       (m_axi_bid),
+    .S00_AXI_0_bready                    (m_axi_bready),
+    .S00_AXI_0_bresp                     (m_axi_bresp),
+    .S00_AXI_0_bvalid                    (m_axi_bvalid),
+    .S00_AXI_0_rdata                     (m_axi_rdata),
+    .S00_AXI_0_rid                       (m_axi_rid),
+    .S00_AXI_0_rlast                     (m_axi_rlast),
+    .S00_AXI_0_rready                    (m_axi_rready),
+    .S00_AXI_0_rresp                     (m_axi_rresp),
+    .S00_AXI_0_rvalid                    (m_axi_rvalid),
+    .S00_AXI_0_wdata                     (m_axi_wdata),
+    .S00_AXI_0_wlast                     (m_axi_wlast),
+    .S00_AXI_0_wready                    (m_axi_wready),
+    .S00_AXI_0_wstrb                     (m_axi_wstrb),
+    .S00_AXI_0_wuser                     (m_axi_wuser),
+    .S00_AXI_0_wvalid                    (m_axi_wvalid),
+
+    .aresetn                             (pcie_rstn),
+    .axi_clk                             (axis_aclk),
+    .axi_resetn                          (powerup_rstn),
+    .hbm_ref_clk                         (hbm_ref_clk)
+  );
+
   qdma_subsystem_qdma_wrapper #(
     .QDMA_ID (QDMA_ID)
   ) qdma_wrapper_inst (
@@ -343,6 +498,19 @@ module qdma_subsystem #(
     .h2c_byp_in_st_no_dma            (h2c_byp_in_st_no_dma),
     .h2c_byp_in_st_rdy               (h2c_byp_in_st_rdy),
 
+    .h2c_byp_in_mm_vld               (h2c_byp_in_mm_vld),
+    .h2c_byp_in_mm_radr              (h2c_byp_in_mm_radr),
+    .h2c_byp_in_mm_wadr              (h2c_byp_in_mm_wadr),
+    .h2c_byp_in_mm_len               (h2c_byp_in_mm_len),
+    .h2c_byp_in_mm_mrkr_req          (h2c_byp_in_mm_mrkr_req),
+    .h2c_byp_in_mm_port_id           (h2c_byp_in_mm_port_id),
+    .h2c_byp_in_mm_sdi               (h2c_byp_in_mm_sdi),
+    .h2c_byp_in_mm_qid               (h2c_byp_in_mm_qid),
+    .h2c_byp_in_mm_error             (h2c_byp_in_mm_error),
+    .h2c_byp_in_mm_func              (h2c_byp_in_mm_func),
+    .h2c_byp_in_mm_cidx              (h2c_byp_in_mm_cidx),
+    .h2c_byp_in_mm_no_dma            (h2c_byp_in_mm_no_dma),
+
     .c2h_byp_out_vld                 (c2h_byp_out_vld),
     .c2h_byp_out_dsc                 (c2h_byp_out_dsc),
     .c2h_byp_out_st_mm               (c2h_byp_out_st_mm),
@@ -365,6 +533,60 @@ module qdma_subsystem #(
     .c2h_byp_in_st_csh_pfch_tag      (c2h_byp_in_st_csh_pfch_tag),
     .c2h_byp_in_st_csh_rdy           (c2h_byp_in_st_csh_rdy),
 
+    .c2h_byp_in_mm_vld               (c2h_byp_in_mm_vld),
+    .c2h_byp_in_mm_radr              (c2h_byp_in_mm_radr),
+    .c2h_byp_in_mm_wadr              (c2h_byp_in_mm_wadr),
+    .c2h_byp_in_mm_len               (c2h_byp_in_mm_len),
+    .c2h_byp_in_mm_mrkr_req          (c2h_byp_in_mm_mrkr_req),
+    .c2h_byp_in_mm_port_id           (c2h_byp_in_mm_port_id),
+    .c2h_byp_in_mm_sdi               (c2h_byp_in_mm_sdi),
+    .c2h_byp_in_mm_qid               (c2h_byp_in_mm_qid),
+    .c2h_byp_in_mm_error             (c2h_byp_in_mm_error),
+    .c2h_byp_in_mm_func              (c2h_byp_in_mm_func),
+    .c2h_byp_in_mm_cidx              (c2h_byp_in_mm_cidx),
+    .c2h_byp_in_mm_no_dma            (c2h_byp_in_mm_no_dma),
+
+    .m_axi_araddr                    (m_axi_araddr),
+    .m_axi_arburst                   (m_axi_arburst),
+    .m_axi_arcache                   (m_axi_arcache),
+    .m_axi_arid                      (m_axi_arid),
+    .m_axi_arlen                     (m_axi_arlen),
+    .m_axi_arlock                    (m_axi_arlock),
+    .m_axi_arprot                    (m_axi_arprot),
+    // .m_axi_arqos                     (m_axi_arqos),
+    .m_axi_arready                   (m_axi_arready),
+    .m_axi_arsize                    (m_axi_arsize),
+    .m_axi_aruser                    (m_axi_aruser),
+    .m_axi_arvalid                   (m_axi_arvalid),
+    .m_axi_awaddr                    (m_axi_awaddr),
+    .m_axi_awburst                   (m_axi_awburst),
+    .m_axi_awcache                   (m_axi_awcache),
+    .m_axi_awid                      (m_axi_awid),
+    .m_axi_awlen                     (m_axi_awlen),
+    .m_axi_awlock                    (m_axi_awlock),
+    .m_axi_awprot                    (m_axi_awprot),
+    // .m_axi_awqos                     (m_axi_awqos),
+    .m_axi_awready                   (m_axi_awready),
+    .m_axi_awsize                    (m_axi_awsize),
+    .m_axi_awuser                    (m_axi_awuser),
+    .m_axi_awvalid                   (m_axi_awvalid),
+    .m_axi_bid                       (m_axi_bid),
+    .m_axi_bready                    (m_axi_bready),
+    .m_axi_bresp                     (m_axi_bresp),
+    .m_axi_bvalid                    (m_axi_bvalid),
+    .m_axi_rdata                     (m_axi_rdata),
+    .m_axi_rid                       (m_axi_rid),
+    .m_axi_rlast                     (m_axi_rlast),
+    .m_axi_rready                    (m_axi_rready),
+    .m_axi_rresp                     (m_axi_rresp),
+    .m_axi_rvalid                    (m_axi_rvalid),
+    .m_axi_wdata                     (m_axi_wdata),
+    .m_axi_wlast                     (m_axi_wlast),
+    .m_axi_wready                    (m_axi_wready),
+    .m_axi_wstrb                     (m_axi_wstrb),
+    .m_axi_wuser                     (m_axi_wuser),
+    .m_axi_wvalid                    (m_axi_wvalid),
+
     .pcie_refclk                     (pcie_refclk),
     .pcie_refclk_gt                  (pcie_refclk_gt),
     .pcie_rstn                       (pcie_rstn),
@@ -377,13 +599,13 @@ module qdma_subsystem #(
     .axis_aclk                       (axis_aclk),
 
 `ifdef __au55n__
-    .ref_clk_100mhz                  (ref_clk_100mhz),
+    .ref_clk_100mhz                  (hbm_ref_clk),
 `elsif __au55c__
-    .ref_clk_100mhz                  (ref_clk_100mhz),
+    .ref_clk_100mhz                  (hbm_ref_clk),
 `elsif __au50__
-    .ref_clk_100mhz                  (ref_clk_100mhz),
+    .ref_clk_100mhz                  (hbm_ref_clk),
 `elsif __au280__
-    .ref_clk_100mhz                  (ref_clk_100mhz),
+    .ref_clk_100mhz                  (hbm_ref_clk),
 `endif
 
     .aresetn                         (powerup_rstn)
diff --git a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
index 9f426ba..429f995 100644
--- a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
+++ b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
@@ -111,6 +111,20 @@ module qdma_subsystem_qdma_wrapper #(
   input          h2c_byp_in_st_no_dma,
   output         h2c_byp_in_st_rdy,
 
+  input          h2c_byp_in_mm_vld,
+  input   [63:0] h2c_byp_in_mm_radr,
+  input   [63:0] h2c_byp_in_mm_wadr,
+  input   [15:0] h2c_byp_in_mm_len,
+  input          h2c_byp_in_mm_mrkr_req,
+  input    [2:0] h2c_byp_in_mm_port_id,
+  input          h2c_byp_in_mm_sdi,
+  input   [10:0] h2c_byp_in_mm_qid,
+  input          h2c_byp_in_mm_error,
+  input    [7:0] h2c_byp_in_mm_func,
+  input   [15:0] h2c_byp_in_mm_cidx,
+  input          h2c_byp_in_mm_no_dma,
+  output         h2c_byp_in_mm_rdy,
+
   output         c2h_byp_out_vld,
   output [255:0] c2h_byp_out_dsc,
   output         c2h_byp_out_st_mm,
@@ -133,6 +147,61 @@ module qdma_subsystem_qdma_wrapper #(
   input    [6:0] c2h_byp_in_st_csh_pfch_tag,
   output         c2h_byp_in_st_csh_rdy,
 
+  input          c2h_byp_in_mm_vld,
+  input   [63:0] c2h_byp_in_mm_radr,
+  input   [63:0] c2h_byp_in_mm_wadr,
+  input   [15:0] c2h_byp_in_mm_len,
+  input          c2h_byp_in_mm_mrkr_req,
+  input    [2:0] c2h_byp_in_mm_port_id,
+  input          c2h_byp_in_mm_sdi,
+  input   [10:0] c2h_byp_in_mm_qid,
+  input          c2h_byp_in_mm_error,
+  input    [7:0] c2h_byp_in_mm_func,
+  input   [15:0] c2h_byp_in_mm_cidx,
+  input          c2h_byp_in_mm_no_dma,
+  output         c2h_byp_in_mm_rdy,
+
+  output  [63:0] m_axi_araddr,
+  output   [1:0] m_axi_arburst,
+  output   [3:0] m_axi_arcache,
+  output   [3:0] m_axi_arid,
+  output   [7:0] m_axi_arlen,
+  output   [0:0] m_axi_arlock,
+  output   [2:0] m_axi_arprot,
+  // output   [3:0] m_axi_arqos,
+  input          m_axi_arready,
+  output   [2:0] m_axi_arsize,
+  output  [31:0] m_axi_aruser,
+  output         m_axi_arvalid,
+  output  [63:0] m_axi_awaddr,
+  output   [1:0] m_axi_awburst,
+  output   [3:0] m_axi_awcache,
+  output   [3:0] m_axi_awid,
+  output   [7:0] m_axi_awlen,
+  output   [0:0] m_axi_awlock,
+  output   [2:0] m_axi_awprot,
+  // output   [3:0] m_axi_awqos,
+  input          m_axi_awready,
+  output   [2:0] m_axi_awsize,
+  output  [31:0] m_axi_awuser,
+  output         m_axi_awvalid,
+  input    [3:0] m_axi_bid,
+  output         m_axi_bready,
+  input    [1:0] m_axi_bresp,
+  input          m_axi_bvalid,
+  input  [511:0] m_axi_rdata,
+  input    [3:0] m_axi_rid,
+  input          m_axi_rlast,
+  output         m_axi_rready,
+  input    [1:0] m_axi_rresp,
+  input          m_axi_rvalid,
+  output [511:0] m_axi_wdata,
+  output         m_axi_wlast,
+  input          m_axi_wready,
+  output  [63:0] m_axi_wstrb,
+  output  [63:0] m_axi_wuser,
+  output         m_axi_wvalid,
+
   input          pcie_refclk,
   input          pcie_refclk_gt,
   input          pcie_rstn,
@@ -336,6 +405,20 @@ module qdma_subsystem_qdma_wrapper #(
       .h2c_byp_out_fmt                      (h2c_byp_out_fmt),
       .h2c_byp_out_rdy                      (h2c_byp_out_rdy),
 
+      .h2c_byp_in_mm_vld                    (h2c_byp_in_mm_vld),
+      .h2c_byp_in_mm_radr                   (h2c_byp_in_mm_radr),
+      .h2c_byp_in_mm_wadr                   (h2c_byp_in_mm_wadr),
+      .h2c_byp_in_mm_len                    (h2c_byp_in_mm_len),
+      .h2c_byp_in_mm_mrkr_req               (h2c_byp_in_mm_mrkr_req),
+      .h2c_byp_in_mm_port_id                (h2c_byp_in_mm_port_id),
+      .h2c_byp_in_mm_sdi                    (h2c_byp_in_mm_sdi),
+      .h2c_byp_in_mm_qid                    (h2c_byp_in_mm_qid),
+      .h2c_byp_in_mm_error                  (h2c_byp_in_mm_error),
+      .h2c_byp_in_mm_func                   (h2c_byp_in_mm_func),
+      .h2c_byp_in_mm_cidx                   (h2c_byp_in_mm_cidx),
+      .h2c_byp_in_mm_no_dma                 (h2c_byp_in_mm_no_dma),
+      .h2c_byp_in_mm_rdy                    (h2c_byp_in_mm_rdy),
+
       .h2c_byp_in_st_vld                    (h2c_byp_in_st_vld),
       .h2c_byp_in_st_addr                   (h2c_byp_in_st_addr),
       .h2c_byp_in_st_len                    (h2c_byp_in_st_len),
@@ -351,6 +434,20 @@ module qdma_subsystem_qdma_wrapper #(
       .h2c_byp_in_st_no_dma                 (h2c_byp_in_st_no_dma),
       .h2c_byp_in_st_rdy                    (h2c_byp_in_st_rdy),
 
+      .c2h_byp_in_mm_vld                    (c2h_byp_in_mm_vld),
+      .c2h_byp_in_mm_radr                   (c2h_byp_in_mm_radr),
+      .c2h_byp_in_mm_wadr                   (c2h_byp_in_mm_wadr),
+      .c2h_byp_in_mm_len                    (c2h_byp_in_mm_len),
+      .c2h_byp_in_mm_mrkr_req               (c2h_byp_in_mm_mrkr_req),
+      .c2h_byp_in_mm_port_id                (c2h_byp_in_mm_port_id),
+      .c2h_byp_in_mm_sdi                    (c2h_byp_in_mm_sdi),
+      .c2h_byp_in_mm_qid                    (c2h_byp_in_mm_qid),
+      .c2h_byp_in_mm_error                  (c2h_byp_in_mm_error),
+      .c2h_byp_in_mm_func                   (c2h_byp_in_mm_func),
+      .c2h_byp_in_mm_cidx                   (c2h_byp_in_mm_cidx),
+      .c2h_byp_in_mm_no_dma                 (c2h_byp_in_mm_no_dma),
+      .c2h_byp_in_mm_rdy                    (c2h_byp_in_mm_rdy),
+
       .c2h_byp_out_vld                      (c2h_byp_out_vld),
       .c2h_byp_out_dsc                      (c2h_byp_out_dsc),
       .c2h_byp_out_st_mm                    (c2h_byp_out_st_mm),
@@ -455,6 +552,47 @@ module qdma_subsystem_qdma_wrapper #(
       .qsts_out_vld                         (),     // output wire qsts_out_vld
       .qsts_out_rdy                         (1'b1), // input wire qsts_out_rdy
 
+      .m_axi_araddr                         (m_axi_araddr),
+      .m_axi_arburst                        (m_axi_arburst),
+      .m_axi_arcache                        (m_axi_arcache),
+      .m_axi_arid                           (m_axi_arid),
+      .m_axi_arlen                          (m_axi_arlen),
+      .m_axi_arlock                         (m_axi_arlock),
+      .m_axi_arprot                         (m_axi_arprot),
+      // .m_axi_arqos                          (m_axi_arqos),
+      .m_axi_arready                        (m_axi_arready),
+      .m_axi_arsize                         (m_axi_arsize),
+      .m_axi_aruser                         (m_axi_aruser),
+      .m_axi_arvalid                        (m_axi_arvalid),
+      .m_axi_awaddr                         (m_axi_awaddr),
+      .m_axi_awburst                        (m_axi_awburst),
+      .m_axi_awcache                        (m_axi_awcache),
+      .m_axi_awid                           (m_axi_awid),
+      .m_axi_awlen                          (m_axi_awlen),
+      .m_axi_awlock                         (m_axi_awlock),
+      .m_axi_awprot                         (m_axi_awprot),
+      // .m_axi_awqos                          (m_axi_awqos),
+      .m_axi_awready                        (m_axi_awready),
+      .m_axi_awsize                         (m_axi_awsize),
+      .m_axi_awuser                         (m_axi_awuser),
+      .m_axi_awvalid                        (m_axi_awvalid),
+      .m_axi_bid                            (m_axi_bid),
+      .m_axi_bready                         (m_axi_bready),
+      .m_axi_bresp                          (m_axi_bresp),
+      .m_axi_bvalid                         (m_axi_bvalid),
+      .m_axi_rdata                          (m_axi_rdata),
+      .m_axi_rid                            (m_axi_rid),
+      .m_axi_rlast                          (m_axi_rlast),
+      .m_axi_rready                         (m_axi_rready),
+      .m_axi_rresp                          (m_axi_rresp),
+      .m_axi_rvalid                         (m_axi_rvalid),
+      .m_axi_wdata                          (m_axi_wdata),
+      .m_axi_wlast                          (m_axi_wlast),
+      .m_axi_wready                         (m_axi_wready),
+      .m_axi_wstrb                          (m_axi_wstrb),
+      .m_axi_wuser                          (m_axi_wuser),
+      .m_axi_wvalid                         (m_axi_wvalid),
+
       .soft_reset_n                         (soft_reset_n),
       .phy_ready                            (phy_ready)
     );
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl
index 45a6aea..929a260 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl
@@ -17,44 +17,38 @@
 # *************************************************************************
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
-set_property -dict {
-    CONFIG.mode_selection {Advanced}
-    CONFIG.pl_link_cap_max_link_width {X16}
-    CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
-    CONFIG.en_transceiver_status_ports {false}
-    CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
-    CONFIG.testname {st}
-    CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.dma_reset_source_sel {Phy_Ready}
-    CONFIG.pf0_bar2_scale_qdma {Megabytes}
-    CONFIG.pf0_bar2_size_qdma {4}
-    CONFIG.pf1_bar2_scale_qdma {Megabytes}
-    CONFIG.pf1_bar2_size_qdma {4}
-    CONFIG.pf2_bar2_scale_qdma {Megabytes}
-    CONFIG.pf2_bar2_size_qdma {4}
-    CONFIG.pf3_bar2_scale_qdma {Megabytes}
-    CONFIG.pf3_bar2_size_qdma {4}
-    CONFIG.PF0_MSIX_CAP_TABLE_SIZE_qdma {009}
-    CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion}
-    CONFIG.en_axi_mm_qdma {false}
-    CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
-    CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16}
-    CONFIG.xlnx_ref_board {AU55C}
-    CONFIG.pf0_base_class_menu_qdma {Network_controller}
-    CONFIG.pf0_class_code_base_qdma {02}
-    CONFIG.pf0_class_code_sub_qdma {80}
-    CONFIG.pf0_sub_class_interface_menu_qdma {Other_network_controller}
-    CONFIG.pf0_class_code_qdma {028000}
-    CONFIG.pf1_base_class_menu_qdma {Network_controller}
-    CONFIG.pf1_class_code_base_qdma {02}
-    CONFIG.pf1_class_code_sub_qdma {80}
-    CONFIG.pf1_sub_class_interface_menu_qdma {Other_network_controller}
-    CONFIG.pf1_class_code_qdma {028000}
-} [get_ips $qdma]
+set_property -dict [list \
+  CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16} \
+  CONFIG.PF0_MSIX_CAP_TABLE_SIZE_qdma {009} \
+  CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008} \
+  CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008} \
+  CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008} \
+  CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn} \
+  CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion} \
+  CONFIG.dma_reset_source_sel {Phy_Ready} \
+  CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal} \
+  CONFIG.en_axi_mm_qdma {true} \
+  CONFIG.en_transceiver_status_ports {false} \
+  CONFIG.mode_selection {Advanced} \
+  CONFIG.num_queues {512} \
+  CONFIG.pf0_bar2_scale_qdma {Megabytes} \
+  CONFIG.pf0_bar2_size_qdma {4} \
+  CONFIG.pf0_base_class_menu_qdma {Network_controller} \
+  CONFIG.pf0_class_code_base_qdma {02} \
+  CONFIG.pf0_class_code_sub_qdma {80} \
+  CONFIG.pf0_sub_class_interface_menu_qdma {Other_network_controller} \
+  CONFIG.pf1_base_class_menu_qdma {Network_controller} \
+  CONFIG.pf1_class_code_base_qdma {02} \
+  CONFIG.pf1_class_code_sub_qdma {80} \
+  CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000} \
+  CONFIG.pf1_sub_class_interface_menu_qdma {Other_network_controller} \
+  CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000} \
+  CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000} \
+  CONFIG.pl_link_cap_max_link_speed {8.0_GT/s} \
+  CONFIG.pl_link_cap_max_link_width {X16} \
+  CONFIG.testname {mm_st} \
+  CONFIG.tl_pf_enable_reg {1} \
+  CONFIG.xlnx_ref_board {AU55C} \
+] [get_ips qdma_no_sriov]
 set_property CONFIG.tl_pf_enable_reg $num_phys_func [get_ips $qdma]
 set_property CONFIG.num_queues $num_queue [get_ips $qdma]
-- 
2.34.1

